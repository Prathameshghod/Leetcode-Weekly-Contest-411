                              LEETCODE WEEKLY CONTEST 411


*************************** 3258. Count Substrings That Satisfy K-Constraint I  ****************************************************************************************

# Python Code 

class Solution:
    def countKConstraintSubstrings(self, s: str, k: int) -> int:
        n = len(s)
        count = 0
        
        for i in range(n):
            zeroCount, oneCount = 0, 0
            for j in range(i, n):
                if s[j] == '0':
                    zeroCount += 1
                else:
                    oneCount += 1
                
                if zeroCount <= k or oneCount <= k:
                    count += 1
                else:
                    break
        
        return count

*************************** 3259. Maximum Energy Boost From Two Drinks  ****************************************************************************************

# Python Code 

from typing import List

class Solution:
    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:
        n = len(energyDrinkA)
        a, b = [0] * n, [0] * n
        
        a[0] = energyDrinkA[0]
        b[0] = energyDrinkB[0]
        
        for i in range(1, n):
            a[i] = max(a[i-1] + energyDrinkA[i], b[i-1])
            b[i] = max(b[i-1] + energyDrinkB[i], a[i-1])
        
        return max(a[n-1], b[n-1])

